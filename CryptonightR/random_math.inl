// Auto-generated file, do not edit

FORCEINLINE void random_math(uint32_t& r0, uint32_t& r1, uint32_t& r2, uint32_t& r3, const uint32_t r4, const uint32_t r5, const uint32_t r6, const uint32_t r7)
{
	// Comments below show latency for each register on an abstract CPU:
	// - Superscalar, out-of-order execution, fully pipelined
	// - Two integer ALUs
	// - ALU0 can do all operations
	// - ALU1 can only do 1-cycle operations
	// - Latency for MUL is 3 cycles, throughput is 1 MUL/cycle
	// - Latency for all other operation is 1 cycle

	r3 = _rotl(r3, r7);		// 0, 0, 0, 1
	r1 = _rotr(r1, r3);		// 0, 2, 0, 1
	r3 = _rotl(r3, r3);		// 0, 2, 0, 2
	r0 *= r2;			// 3, 2, 0, 2
	r3 -= r6;			// 3, 2, 0, 3
	r0 *= r3;			// 6, 2, 0, 3
	r0 = _rotl(r0, r7);		// 7, 2, 0, 3
	r2 *= r0;			// 7, 2, 10, 3
	r2 += r2 + 30;			// 7, 2, 11, 3
	r1 *= r3;			// 7, 7, 11, 3
	r3 += r3 - 76;			// 7, 7, 11, 4
	r3 *= r1;			// 7, 7, 11, 11
	r2 = _rotl(r2, r6);		// 7, 7, 12, 11
	r0 *= r7;			// 12, 7, 12, 11
	r0 *= r3;			// 15, 7, 12, 11
	r2 *= r3;			// 15, 7, 16, 11
	r3 = _rotl(r3, r3);		// 15, 7, 16, 12
	r1 ^= r5;			// 15, 8, 16, 12
	r1 *= r2;			// 15, 19, 16, 12
	r0 *= r1;			// 22, 19, 16, 12
	r1 = _rotl(r1, r5);		// 22, 20, 16, 12
	r0 *= r7;			// 25, 20, 16, 12
	r1 ^= r3;			// 25, 21, 16, 12
	r3 *= r4;			// 25, 21, 16, 17
	r2 += r2 + 69;			// 25, 21, 17, 17
	r1 = _rotl(r1, r2);		// 25, 22, 17, 17
	r3 = _rotr(r3, r7);		// 25, 22, 17, 18
	r0 -= r5;			// 26, 22, 17, 18
	r0 *= r3;			// 29, 22, 17, 18
	r2 *= r6;			// 29, 22, 20, 18
	r0 -= r2;			// 30, 22, 20, 18
	r2 *= r1;			// 30, 22, 26, 18
	r2 ^= r1;			// 30, 22, 27, 18
	r0 += r6 - 79;			// 31, 22, 27, 18
	r0 *= r0;			// 34, 22, 27, 18
	r2 -= r6;			// 34, 22, 28, 18
	r0 ^= r1;			// 35, 22, 28, 18
	r0 *= r2;			// 38, 22, 28, 18
	r2 -= r6;			// 38, 22, 29, 18
	r1 ^= r5;			// 38, 23, 29, 18
	r3 *= r7;			// 38, 23, 29, 21
	r3 = _rotr(r3, r5);		// 38, 23, 29, 22
	r2 *= r5;			// 38, 23, 32, 22
	r0 ^= r4;			// 39, 23, 32, 22
	r1 *= r3;			// 39, 27, 32, 22
	r0 += r3 + 16;			// 40, 27, 32, 22
	r3 -= r7;			// 40, 27, 32, 24
	r3 -= r2;			// 40, 27, 32, 33
	r2 -= r5;			// 40, 27, 33, 33
	r0 = _rotl(r0, r3);		// 41, 27, 33, 33
	r0 *= r3;			// 44, 27, 33, 33
	r2 = _rotr(r2, r6);		// 44, 27, 34, 33
	r2 = _rotl(r2, r3);		// 44, 27, 35, 33
	r3 = _rotl(r3, r2);		// 44, 27, 35, 36
	r3 += r4 + 117;			// 44, 27, 35, 37
	r0 *= r1;			// 47, 27, 35, 37
	r0 *= r7;			// 50, 27, 35, 37
	r1 -= r2;			// 50, 37, 35, 37
	r1 *= r5;			// 50, 40, 35, 37
	r0 += r4 + 79;			// 51, 40, 35, 37
	r1 *= r3;			// 51, 43, 35, 37
	r0 = _rotr(r0, r2);		// 52, 43, 35, 37
	r1 += r2 - 45;			// 52, 44, 35, 37
	r3 *= r1;			// 52, 44, 35, 48
	r1 *= r4;			// 52, 49, 35, 48
	r2 = _rotl(r2, r0);		// 52, 49, 53, 48
	r1 = _rotr(r1, r6);		// 52, 50, 53, 48
	r0 -= r7;			// 53, 50, 53, 48
	r1 ^= r0;			// 53, 54, 53, 48
	r3 += r4 - 47;			// 53, 54, 53, 49
	r3 = _rotr(r3, r7);		// 53, 54, 53, 50
	r3 = _rotl(r3, r4);		// 53, 54, 53, 51
	r2 -= r5;			// 53, 54, 54, 51
	r3 *= r4;			// 53, 54, 54, 54

	// Theoretical minimal latency: 52, 53, 53, 50
	// Total instructions: 74
}
